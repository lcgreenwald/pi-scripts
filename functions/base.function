#this installs the basic software for pi-scripts-install
#km4ack 20200513
#wb0sio 20200820 Converted km4ack base.function to wb0sio base.function

TEMPCRON=${MYPATH}/cron.tmp

################################
#	LOG2RAM
################################
Log2ram(){
if ! hash log2ram 2>/dev/null; then
	echo "deb http://packages.azlux.fr/debian/ buster main" | sudo tee /etc/apt/sources.list.d/azlux.list
	wget -qO - https://azlux.fr/repo.gpg.key | sudo apt-key add -
fi
	sudo apt install -y log2ram
	sudo sed -i "s/SIZE=40M/SIZE=200M/" /etc/log2ram.conf
	sudo sed -i "s/USE_RSYNC=false/USE_RSYNC=true/" /etc/log2ram.conf
	sudo sed -i "s/PATH_DISK=\"\/var\/log\"/PATH_DISK=\"\/var\/log;\/home\/pi\/.local\/share\"/" /etc/log2ram.conf
	sudo sed -i "s/ZL2R=false/ZL2R=true/" /etc/log2ram.conf
	sudo sed -i "s/LOG_DISK_SIZE=100M/LOG_DISK_SIZE=200M/" /etc/log2ram.conf
}
################################
#	LOCATE
################################
Locate(){
	sudo apt install -y locate
}
################################
#	PLANK
################################
Plank(){
	sudo apt install -y plank
	if [ ! -d ${HOME}/.config/plank/dock1/launchers 2>/dev/null ] ;	then
		mkdir -p ${HOME}/.config/plank/dock1/launchers
	fi
	sudo cp -f ${MYPATH}/launchers/* ${HOME}/.config/plank/dock1/launchers/
	if [ ! -d ${HOME}/.config/autostart 2>/dev/null ] ; then
		mkdir -p ${HOME}/.config/autostart
	fi
	sudo cp -f /usr/share/applications/plank.desktop ${HOME}/.config/autostart/
}
################################
#	SAMBA
################################
Samba(){
	sudo apt install -y samba samba-common-bin smbclient cifs-utils
	sudo sed -i "s/WORKGROUP/WB0SIO/" /etc/samba/smb.conf
	sudo mkdir /home/public
	sudo chmod 777 /home/public
	cat <<EOF > ${MYPATH}/samba_share.txt
[public]
  path = /home/public
  read only = no
  public = yes
  writable = yes
EOF
	sudo chmod 666 /etc/samba/smb.conf  
	sudo cat ${MYPATH}/samba_share.txt >> /etc/samba/smb.conf
	sudo chmod 644 /etc/samba/smb.conf
	rm ${MYPATH}/samba_share.txt
}
################################
#	WEBMIN
################################
Webmin(){
	cd ${HOME}/Downloads
	sudo apt install -y perl libnet-ssleay-perl openssl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python
	wget http://www.webmin.com/download/deb/webmin-current.deb
	sudo dpkg -i webmin-current.deb
	cd
}
################################
#	3.5" DISPLAY DRIVERS
################################
Display(){
	# Install 3.5" display drivers  
	cd
	git clone https://github.com/MrYacha/LCD-show.git
	sudo chmod -R 755 LCD-show

	cat <<EOF > ${HOME}/.local/share/applications/LCD35-show.desktop
[Desktop Entry]
Name=LCD35-show
Comment=LCD35-show
GenericName=Enable 3.5" Display
Exec=/home/pi/pi-scripts/lcd35.sh
Icon=/home/pi/pi-scripts/conky/conky-logo.png
Type=Application
Encoding=UTF-8
Terminal=false
Categories=Settings;DesktopSettings;
Keywords=Display
EOF

	cat <<EOF > ${HOME}/.local/share/applications/LCD-hdmi.desktop
[Desktop Entry]
Name=LCD-hdmi
Comment=LCD-hdmi
GenericName=Enable HDMI Display
Exec=/home/pi/pi-scripts/hdmi.sh
Icon=/home/pi/pi-scripts/conky/conky-logo.png
Type=Application
Encoding=UTF-8
Terminal=false
Categories=Settings;DesktopSettings;
Keywords=Display
EOF

}

################################
#	cqrprop
################################
Cqrprop(){
	sudo apt install -y git lazarus-ide lcl lcl-gtk2 lcl-nogui lcl-units lcl-utils lazarus lazarus-doc lazarus-src fp-units-misc fp-units-rtl fp-utils fpc fpc-source libssl-dev
	git clone https://github.com/ok2cqr/cqrprop.git
	cd cqrprop
	make 
	sudo make install
}
################################

################################
#	Disks
################################
Disks(){
	sudo apt install -y gnome-disk-utility
}
################################

################################
#	PiImager
################################
PiImager(){
	sudo apt install -y rpi-imager 
}
################################

################################
#	Neofetch
################################
Neofetch(){
	sudo apt install -y neofetch
}
################################

################################
#	CommanderPi
################################
CommanderPi(){
  cd
	git clone https://github.com/Jack477/CommanderPi.git
	cd CommanderPi
	sudo apt-get install -y python3-tk python3-pil python3-pil.imagetk
	bash install.sh
	cd
}
################################

################################
#	Fortune
################################
Fortune(){
	sudo apt install -y fortune fortunes 
}
################################

################################
#	DeskPi
################################
DeskPi(){
	/home/pi/pi-scripts/DeskPi.sh 
}
################################

################################
#	Argon
################################
Argon(){
	curl https://download.argon40.com/argon1.sh|bash 
	mv /home/pi/Desktop/argonone-* /home/pi/.local/share/applications
	sed -i "s/Categories=.*$/Categories=Settings;DesktopSettings;GTK;X-LXDE-Settings;/" /home/pi/.local/share/applications/argonone-config.desktop
	sed -i "s/Categories=.*$/Categories=Settings;DesktopSettings;GTK;X-LXDE-Settings;/" /home/pi/.local/share/applications/argonone-uninstall.desktop
}
################################

################################
#	X715
################################
X715(){
##  https://wiki.geekworm.com/X715_Software

if [ ! -d ${HOME}/X715 2>/dev/null ]; then
	sudo apt-get install -y pigpio python-pigpio python3-pigpio
	sudo systemctl enable pigpiod
	git clone https://github.com/geekworm-com/x715
	crontab -l > ${TEMPCRON}
	echo "@reboot python /home/pi/x715/pwm_fan_control.py" >> ${TEMPCRON}
	crontab ${TEMPCRON}
	rm ${TEMPCRON}
	# Create the desktop entry
	cat <<EOF > ${HOME}/.local/share/applications/X715.desktop
[Desktop Entry]
Version=1.0
Name=X715
Comment= Display X715 fan speed
Exec=sudo python /home/pi/x715/read_fan_speed.py
Icon=/usr/share/icons/PiXflat/16x16/apps/launch.png
Terminal=false
X-MultipleArgs=false
Type=Application
Categories=HamRadio;wb0sio;
StartupNotify=true
NoDisplay=false
EOF

else
	cd ${HOME}/X7115
	git pull
	cd
fi
}
################################

################################
#	PiSafe
################################
PiSafe(){
  cd
  wget https://raw.githubusercontent.com/RichardMidnight/pi-safe/main/pisafe -O pisafe
  bash pisafe install -y
}
################################

################################
#	RPiMonitor
################################
RPiMonitor(){
if ! hash rpimonitor 2>/dev/null; then
	sudo apt-get install dirmngr
	sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 2C0D3C0F
	sudo wget http://goo.gl/vewCLL -O /etc/apt/sources.list.d/rpimonitor.list
	sudo apt update
fi
sudo apt install -y rpimonitor
}
################################

################################
#	js8map
################################
JS8map(){
	# Install/update js8map  
	cd
	if [ ! -d ${HOME}/js8map 2>/dev/null ]; then
		git clone https://github.com/OddLingo/js8map.git
		python3 -m pip install --upgrade pip
		python3 -m pip install --upgrade Pillow
	else
		cd js8map
		git pull
		cd
	fi

# Create the desktop entry
	cat <<EOF > ${HOME}/.local/share/applications/js8map.desktop
[Desktop Entry]
Version=1.0
Name=js8map
Comment=Amateur Radio Weak Signal Operating
Exec=/home/pi/bin/js8map.sh
Icon=js8call_icon
Terminal=false
X-MultipleArgs=false
Type=Application
Categories=HamRadio;wb0sio;
StartupNotify=true
NoDisplay=false
EOF

	# Create the shell script to run js8map
	if [ ! -d ${HOME}/bin 2>/dev/null ]; then
		mkdir ${HOME}/bin >/dev/null
	fi

	cat <<EOF > ${HOME}/bin/js8map.sh
#!/bin/bash
cd ${HOME}/js8map
python3 js8map.py
EOF

	# Make the shell script executable
	chmod a+x ${HOME}/bin/js8map.sh
}
################################

################################
#	K4CPO-FD-Logger
################################
K4CPO-FD-Logger(){
if [ ! -d ${HOME}/K4CPO-FD-Logger 2>/dev/null ]; then
	bash ${MYPATH}/fd-logger-install.sh
else
	cd ${HOME}/K4CPO-FD-Logger
	git pull
	cd
fi
}
################################

################################
#	Proto File
################################
Proto(){
if ! hash file 2>/dev/null ; then
	echo "file" >/dev/null
fi
}
################################

################################
#	Proto Folder
################################
ProtoF(){
if [ ! -d ${HOME}/folder 2>/dev/null ]; then
	echo "folder" >/dev/null
else
	echo "no folder" >/dev/null
fi
}
################################
